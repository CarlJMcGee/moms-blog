// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading: 
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model UsersLikedPosts {
    userId String
    user   User   @relation(fields: [userId], references: [id])

    postId String
    post   Post   @relation(fields: [postId], references: [id])

    @@id([userId, postId])
}

model UserLikesComments {
    userId String
    user   User   @relation(fields: [userId], references: [id])

    commentId String
    comment   Comment @relation(fields: [commentId], references: [id])

    @@id([userId, commentId])
}

model Post {
    id        String            @id @default(cuid())
    title     String
    content   String
    image     String?
    createdAt DateTime          @default(now())
    updatedAt DateTime          @default(now()) @updatedAt
    userId    String
    user      User              @relation(fields: [userId], references: [id], onDelete: Cascade, name: "OP")
    userLikes UsersLikedPosts[]
    comments  Comment[]
}

model Comment {
    id        String              @id @default(cuid())
    content   String
    createdAt DateTime            @default(now())
    updatedAt DateTime            @default(now()) @updatedAt
    userId    String
    user      User                @relation(name: "commenter", fields: [userId], references: [id], onDelete: Cascade)
    postId    String
    post      Post                @relation(fields: [postId], references: [id], onDelete: Cascade)
    userLikes UserLikesComments[]
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? //@db.Text
    access_token      String? //@db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? //@db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String              @id @default(cuid())
    name          String
    email         String?             @unique
    emailVerified DateTime?
    password      String
    image         String?
    canPost       Boolean             @default(false)
    admin         Boolean             @default(false)
    banned        Boolean             @default(false)
    posts         Post[]              @relation(name: "OP")
    comments      Comment[]           @relation(name: "commenter")
    likedPosts    UsersLikedPosts[]
    likedComments UserLikesComments[]
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
